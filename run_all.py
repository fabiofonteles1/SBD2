#!/usr/bin/env python3
"""
Script principal para executar todo o projeto Data Lakehouse
Executa setup, valida√ß√£o e automa√ß√£o completa
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def print_banner():
    """Exibe banner do projeto"""
    print("=" * 60)
    print("üöÄ DATA LAKEHOUSE SBD-2 - EXECU√á√ÉO COMPLETA")
    print("=" * 60)
    print()

def run_setup():
    """Executa o setup do projeto"""
    print("üìã ETAPA 1: SETUP DO PROJETO")
    print("-" * 40)
    
    if Path("setup.py").exists():
        result = subprocess.run("python setup.py", shell=True)
        if result.returncode == 0:
            print("‚úÖ Setup conclu√≠do com sucesso")
            return True
        else:
            print("‚ùå Falha no setup")
            return False
    else:
        print("‚ö†Ô∏è  Arquivo setup.py n√£o encontrado, pulando...")
        return True

def run_validation():
    """Executa valida√ß√£o do setup"""
    print("\nüîç ETAPA 2: VALIDA√á√ÉO DO SETUP")
    print("-" * 40)
    
    if Path("scripts/validate_setup.py").exists():
        result = subprocess.run("python scripts/validate_setup.py", shell=True)
        if result.returncode == 0:
            print("‚úÖ Valida√ß√£o conclu√≠da com sucesso")
            return True
        else:
            print("‚ùå Falha na valida√ß√£o")
            return False
    else:
        print("‚ö†Ô∏è  Arquivo validate_setup.py n√£o encontrado, pulando...")
        return True

def run_automation():
    """Executa automa√ß√£o completa"""
    print("\nü§ñ ETAPA 3: AUTOMA√á√ÉO COMPLETA")
    print("-" * 40)
    
    if Path("scripts/run_automation.py").exists():
        result = subprocess.run("python scripts/run_automation.py", shell=True)
        if result.returncode == 0:
            print("‚úÖ Automa√ß√£o conclu√≠da com sucesso")
            return True
        else:
            print("‚ùå Falha na automa√ß√£o")
            return False
    else:
        print("‚ö†Ô∏è  Arquivo run_automation.py n√£o encontrado, pulando...")
        return True

def show_results():
    """Exibe resultados e pr√≥ximos passos"""
    print("\nüéâ EXECU√á√ÉO CONCLU√çDA!")
    print("=" * 60)
    print()
    print("üìä RECURSOS DISPON√çVEIS:")
    print("‚Ä¢ Jupyter Notebooks: notebooks/")
    print("‚Ä¢ Documenta√ß√£o: docs/")
    print("‚Ä¢ Scripts: scripts/")
    print("‚Ä¢ Dados: raw/")
    print()
    print("üåê ACESSOS:")
    print("‚Ä¢ pgAdmin: http://localhost:8080")
    print("  - Email: admin@sbd2.com")
    print("  - Senha: admin123")
    print()
    print("‚Ä¢ Banco de Dados: localhost:5432")
    print("  - Database: sbd2_lakehouse")
    print("  - User: sbd2_user")
    print("  - Password: sbd2_password")
    print()
    print("üìã PR√ìXIMOS PASSOS:")
    print("1. Execute: jupyter notebook notebooks/")
    print("2. Analise os dados com os notebooks")
    print("3. Monitore os logs em: automation.log")
    print("4. Consulte a documenta√ß√£o em: docs/")
    print()
    print("üîß COMANDOS √öTEIS:")
    print("‚Ä¢ Parar containers: docker-compose -f docker/docker-compose.yml down")
    print("‚Ä¢ Reiniciar: python run_all.py")
    print("‚Ä¢ Validar: python scripts/validate_setup.py")
    print()
    print("=" * 60)

def main():
    """Fun√ß√£o principal"""
    print_banner()
    
    # Executa todas as etapas
    steps = [
        ("Setup", run_setup),
        ("Valida√ß√£o", run_validation),
        ("Automa√ß√£o", run_automation)
    ]
    
    success_count = 0
    total_steps = len(steps)
    
    for step_name, step_function in steps:
        try:
            if step_function():
                success_count += 1
            else:
                print(f"‚ö†Ô∏è  {step_name} falhou, mas continuando...")
        except Exception as e:
            print(f"‚ùå Erro em {step_name}: {e}")
    
    # Exibe resultados
    show_results()
    
    # Status final
    if success_count == total_steps:
        print("üéâ TODAS AS ETAPAS CONCLU√çDAS COM SUCESSO!")
        sys.exit(0)
    else:
        print(f"‚ö†Ô∏è  {success_count}/{total_steps} etapas conclu√≠das")
        print("Verifique os logs para detalhes dos erros")
        sys.exit(1)

if __name__ == "__main__":
    main()
